DEFAULT USING:
You can use the plugin with any OSMF2.0-based player.
Two most common use cases are described below:

1. StrobeMediaPlayback (must be OSMF2.0 based!):
    - put HLSDynamicPlugin.swf into any folder on your web-server (I recommend select folder near SMP, though)
    - in the .html-code of player page, find a section where 'flashvars' are initialized.
    On the default page it looks like this:
    var parameters = {
        src: "http://184.72.239.149/vod/smil:BigBuckBunny.smil/playlist.m3u8",
        verbose: true,
        controlBarAutoHide: false,
        controlBarPosition: "bottom",
        poster: "images/poster.png",
        initialBufferTime: 16,
        expandedBufferTime: 32,
        autoPlay: false
    };
    - and just by adding a string to it You get:
        hls_plugin: "<path/to/your/>HLSDynamicPlugin.swf" (<path/to/your> - replace with the real plugin folder)
    After this player params must look like this:
    var parameters = {
        src: "http://184.72.239.149/vod/smil:BigBuckBunny.smil/playlist.m3u8",
        verbose: true,
        controlBarAutoHide: false,
        controlBarPosition: "bottom",
        poster: "images/poster.png",
        initialBufferTime: 16,
        expandedBufferTime: 32,
        autoPlay: false,
        hls_plugin: "HLSDynamicPlugin.swf"
    };
    - that's all
    
2. Your own OSMF2.0-based player:
    That's simple :). Just install the plugin like any other OSMF-based plugin. You can use either HLSPlugin.swc or dynamic HLSDynamicPlugin.swf static library.
    To learn how to embed the plugin into the OSMF player You can look into the OSMF documentation ( http://osmf.org/developers.html ).
    

SETTINGS:
Plugin used some buffer control settings (all in HLSSettings.as file) you can change it as you want (but remember about rebuild plugin after changes!)
hlsBufferSizePause = 32 - buffer size when player paused
hlsBufferSizeBig = 16 - buffer size when all good with bandwidth
hlsBufferSizeDef = 4 - default OSMF buffer time

and some error catching settings:
hlsMaxReloadRetryes = 5 - for HTTPHLSNetStream, when live-stream playing. Number of reload playlist tries.
hlsReloadTimeout = 5000 - timeout between playlist reloads

hlsMaxErrors = 10 - for HTTPStreamingHLSIndexHandler (for live-streaming, again). Used when playlist "stuck" on server, and request returns not updated playlist.

Multi-angle feature:

For camera(angle) switching you can use AlternativeVideoTrait class:

import org.denivip.osmf.traits.AlternativeVideoTrait;

it has one API metod:
switchTo(<index>) [where index is value from 0 to 'num of alternate streams-1'] - just provide stream switching.
*after calling this method you must seek your player to current position, in other cases OSMF can't correctly reset cache and will be continue playing old video to end of the cache.

and dispatch event:
AlternativeVideoEvent.VIDEO_SWITCHING_CHANGE when switching was complete (you can use this event for updating switching menu);

2. Labels for menu you can find in your resource in the alternativeVideoStreams vector.

var streams:Vector.<StreamingItems> = resource.alternativeVideoStreams;
for(var i:int = 0; i< streams.length; i++){
    var streamName:String = streams[i].info.label; // for name from playlist
    // do what you want
}